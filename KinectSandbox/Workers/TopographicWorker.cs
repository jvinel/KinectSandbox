using AForge.Imaging.Filters;
using KinectSandbox.Filters;
using KinectSandbox.Tools;
using Microsoft.Kinect;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace KinectSandbox.Workers
{
    public class TopographicWorker: DataFilter
    {
        /// <summary>
        /// Image width: 255 pixels with color gradient used for conversion between grayscale and rgb
        /// </summary>
        public Bitmap Gradient { get; set; }


        public TopographicWorker(DataFilterInput dataFilterInput)
            : base(dataFilterInput)
        {
            
        }

        /// <summary>
        /// Convert a DepthImagePixel array to a bitmap.
        /// Bitmap is colorize if a gradient bitmap has been set, isolines are also added as an overlay
        /// </summary>
        /// <param name="sourceData">DepthImagePixel array (generated by Kinect device depth sensor)</param>
        protected override void Process(DepthImagePixel[] sourceData)
        {
#if TRACE
            this.Log().Debug("New data received to process");
#endif
            Bitmap source = Utility.convertToBitmap(sourceData, (int)this.StartPoint.X, (int)this.StartPoint.Y, this.Height, this.Width, this.MinDepth, this.MaxDepth);
            // Apply a blur on source image (smothing isolines and output)
            Blur blur = new Blur();
            source = blur.Apply(source);
            // Clone bitmap, final will be colorize, than isolines will be applied
            Bitmap final = source.Clone(new System.Drawing.Rectangle(0, 0, source.Width, source.Height), source.PixelFormat);
            // If gradient bitmap available colorize image
            if (this.Gradient != null)
            {
                ColorizedAlpha cAlpha = new ColorizedAlpha(this.Gradient);
                final = cAlpha.Apply(final);
            }

            // Generate isolines (startting at level 10, step 25)
            int level = 10;

            // Isolines bitmap will receive every islone generated, then added to final image
            Bitmap isolines = new Bitmap(this.Width, this.Height, PixelFormat.Format8bppIndexed);
            while (level < 255)
            {
                // Every point over level will be set to black, otherwise white (easier and faster for edge detection)
                Threshold threshold = new Threshold(level);
                Bitmap temp = threshold.Apply(source);

                // Detect Edge using sobel alogorithmn
                //SobelEdgeDetector sobel = new SobelEdgeDetector();
                Edges sobel = new Edges();
                temp = sobel.Apply(temp);

                // Add edge bitmap to tempora
                Add filter = new Add(temp);
                //filter.SourcePercent = 0.6;
                // apply the filter
                filter.ApplyInPlace(isolines);

                // Set next level value
                level = level + 25;
            }
            
            // Convert isolines to rgb (to merge with final image)
            GrayscaleToRGB gtoRGB = new GrayscaleToRGB();
            // apply the filter
            Bitmap rgbIsoline = gtoRGB.Apply(isolines);

            // Add isolines to final image
            CustomMorph cMorph = new CustomMorph(rgbIsoline);
            cMorph.SourcePercent = 0.5;
            final = cMorph.Apply(final);

            // Pass bitmap generated to UI (or other filter)
            OnOutputDataReady(new BitmapReadyEventArgs(final));
        }

       
    }
}
